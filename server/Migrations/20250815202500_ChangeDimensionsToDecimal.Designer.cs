// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace server.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250815202500_ChangeDimensionsToDecimal")]
    partial class ChangeDimensionsToDecimal
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PermissionRole", b =>
                {
                    b.Property<int>("PermissionsId")
                        .HasColumnType("integer");

                    b.Property<int>("RolesId")
                        .HasColumnType("integer");

                    b.HasKey("PermissionsId", "RolesId");

                    b.HasIndex("RolesId");

                    b.ToTable("RolePermissions", (string)null);
                });

            modelBuilder.Entity("server.Models.Client.BusinessClient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BillingAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BusinessName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ClientId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsTaxExempt")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.ToTable("BusinessClients");
                });

            modelBuilder.Entity("server.Models.Client.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<Guid>("Uid")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("server.Models.Client.ContactPerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BusinessClientId")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BusinessClientId");

                    b.ToTable("ContactPerson");
                });

            modelBuilder.Entity("server.Models.Client.ResidentialClient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.ToTable("ResidentialClients");
                });

            modelBuilder.Entity("server.Models.Inventory.BounceHouseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("InventorySubTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("InventorySubTypeId");

                    b.ToTable("BounceHouseTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            InventorySubTypeId = 5,
                            Label = "Dolphin",
                            Name = "Dolphin"
                        },
                        new
                        {
                            Id = 2,
                            InventorySubTypeId = 5,
                            Label = "Spongebob",
                            Name = "Spongebob"
                        });
                });

            modelBuilder.Entity("server.Models.Inventory.InventoryColor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("InventorySubTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("InventoryTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SkuCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("InventorySubTypeId");

                    b.HasIndex("InventoryTypeId");

                    b.ToTable("InventoryColors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            InventorySubTypeId = 1,
                            Label = "Black",
                            Name = "Black",
                            SkuCode = "BLK"
                        },
                        new
                        {
                            Id = 2,
                            InventorySubTypeId = 2,
                            Label = "Black",
                            Name = "Black",
                            SkuCode = "BLK"
                        },
                        new
                        {
                            Id = 3,
                            InventorySubTypeId = 1,
                            Label = "White",
                            Name = "White",
                            SkuCode = "WHT"
                        },
                        new
                        {
                            Id = 4,
                            InventorySubTypeId = 2,
                            Label = "White",
                            Name = "White",
                            SkuCode = "WHT"
                        });
                });

            modelBuilder.Entity("server.Models.Inventory.InventoryItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("AveragePurchaseCost")
                        .HasColumnType("numeric");

                    b.Property<int?>("BounceHouseTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("Height")
                        .HasColumnType("numeric");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<int?>("InventoryColorId")
                        .HasColumnType("integer");

                    b.Property<int?>("InventoryMaterialId")
                        .HasColumnType("integer");

                    b.Property<int>("InventorySubTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("InventoryTypeId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("Length")
                        .HasColumnType("numeric");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<bool>("PackageOnly")
                        .HasColumnType("boolean");

                    b.Property<int>("QuantityTotal")
                        .HasColumnType("integer");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("Uid")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("Width")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("BounceHouseTypeId");

                    b.HasIndex("InventoryColorId");

                    b.HasIndex("InventoryMaterialId");

                    b.HasIndex("InventorySubTypeId");

                    b.HasIndex("InventoryTypeId");

                    b.ToTable("InventoryItems");
                });

            modelBuilder.Entity("server.Models.Inventory.InventoryMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("InventorySubTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("InventoryTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SkuCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("InventorySubTypeId");

                    b.HasIndex("InventoryTypeId");

                    b.ToTable("InventoryMaterials");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            InventorySubTypeId = 1,
                            Label = "Plastic",
                            Name = "Plastic",
                            SkuCode = "PLT"
                        },
                        new
                        {
                            Id = 2,
                            InventorySubTypeId = 2,
                            Label = "Plastic",
                            Name = "Plastic",
                            SkuCode = "PLT"
                        },
                        new
                        {
                            Id = 3,
                            InventorySubTypeId = 1,
                            Label = "Resin",
                            Name = "Resin",
                            SkuCode = "RSN"
                        },
                        new
                        {
                            Id = 4,
                            InventorySubTypeId = 1,
                            Label = "Metal",
                            Name = "Metal",
                            SkuCode = "MTL"
                        },
                        new
                        {
                            Id = 5,
                            InventorySubTypeId = 3,
                            Label = "Vinyl",
                            Name = "Vinyl",
                            SkuCode = "VNL"
                        });
                });

            modelBuilder.Entity("server.Models.Inventory.InventoryPurchase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DatePurchased")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("InventoryItemId")
                        .HasColumnType("integer");

                    b.Property<int>("QuantityPurchased")
                        .HasColumnType("integer");

                    b.Property<Guid>("Uid")
                        .HasColumnType("uuid");

                    b.Property<decimal>("UnitCost")
                        .HasColumnType("numeric");

                    b.Property<string>("VendorName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("InventoryItemId");

                    b.ToTable("InventoryPurchases");
                });

            modelBuilder.Entity("server.Models.Inventory.InventoryRetirement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateRetired")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("InventoryItemId")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int>("QuantityRetired")
                        .HasColumnType("integer");

                    b.Property<int>("Reason")
                        .HasColumnType("integer");

                    b.Property<Guid>("Uid")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("InventoryItemId");

                    b.ToTable("InventoryRetirements");
                });

            modelBuilder.Entity("server.Models.Inventory.InventorySubType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("InventoryTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SkuCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("InventoryTypeId");

                    b.ToTable("InventorySubTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            InventoryTypeId = 1,
                            Label = "Folding",
                            Name = "Folding",
                            SkuCode = "FLD"
                        },
                        new
                        {
                            Id = 2,
                            InventoryTypeId = 2,
                            Label = "Folding",
                            Name = "Folding",
                            SkuCode = "FLD"
                        },
                        new
                        {
                            Id = 3,
                            InventoryTypeId = 3,
                            Label = "Canopy",
                            Name = "Canopy",
                            SkuCode = "CNP"
                        },
                        new
                        {
                            Id = 4,
                            InventoryTypeId = 3,
                            Label = "Pole Tent",
                            Name = "Pole",
                            SkuCode = "POL"
                        },
                        new
                        {
                            Id = 5,
                            InventoryTypeId = 5,
                            Label = "Mechanical Bull",
                            Name = "MechanicalBull",
                            SkuCode = "MBL"
                        },
                        new
                        {
                            Id = 6,
                            InventoryTypeId = 5,
                            Label = "Bounce House",
                            Name = "BounceHouse",
                            SkuCode = "BNC"
                        },
                        new
                        {
                            Id = 7,
                            InventoryTypeId = 4,
                            Label = "String Lights",
                            Name = "String",
                            SkuCode = "STR"
                        });
                });

            modelBuilder.Entity("server.Models.Inventory.InventoryType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SkuCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("InventoryTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Label = "Table",
                            Name = "Table",
                            SkuCode = "TAB"
                        },
                        new
                        {
                            Id = 2,
                            Label = "Chair",
                            Name = "Chair",
                            SkuCode = "CHA"
                        },
                        new
                        {
                            Id = 3,
                            Label = "Tent",
                            Name = "Tent",
                            SkuCode = "TNT"
                        },
                        new
                        {
                            Id = 4,
                            Label = "Lighting",
                            Name = "Lighting",
                            SkuCode = "LGT"
                        },
                        new
                        {
                            Id = 5,
                            Label = "Attraction",
                            Name = "Attraction",
                            SkuCode = "ATR"
                        });
                });

            modelBuilder.Entity("server.Models.User.JobTitle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("JobTitles");
                });

            modelBuilder.Entity("server.Models.User.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("server.Models.User.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("server.Models.User.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int?>("JobTitleId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("PayRate")
                        .HasColumnType("numeric");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Uid")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("JobTitleId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PermissionRole", b =>
                {
                    b.HasOne("server.Models.User.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Models.User.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("server.Models.Client.BusinessClient", b =>
                {
                    b.HasOne("server.Models.Client.Client", "Client")
                        .WithOne("BusinessClient")
                        .HasForeignKey("server.Models.Client.BusinessClient", "ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("server.Models.Client.ContactPerson", b =>
                {
                    b.HasOne("server.Models.Client.BusinessClient", "BusinessClient")
                        .WithMany("Contacts")
                        .HasForeignKey("BusinessClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusinessClient");
                });

            modelBuilder.Entity("server.Models.Client.ResidentialClient", b =>
                {
                    b.HasOne("server.Models.Client.Client", "Client")
                        .WithOne("ResidentialClient")
                        .HasForeignKey("server.Models.Client.ResidentialClient", "ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("server.Models.Address", "Address", b1 =>
                        {
                            b1.Property<int>("ResidentialClientId")
                                .HasColumnType("integer");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("ResidentialClientId");

                            b1.ToTable("ResidentialClients");

                            b1.WithOwner()
                                .HasForeignKey("ResidentialClientId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("server.Models.Inventory.BounceHouseType", b =>
                {
                    b.HasOne("server.Models.Inventory.InventorySubType", "InventorySubType")
                        .WithMany("BounceHouseTypes")
                        .HasForeignKey("InventorySubTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InventorySubType");
                });

            modelBuilder.Entity("server.Models.Inventory.InventoryColor", b =>
                {
                    b.HasOne("server.Models.Inventory.InventorySubType", "InventorySubType")
                        .WithMany("Colors")
                        .HasForeignKey("InventorySubTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Models.Inventory.InventoryType", null)
                        .WithMany("Colors")
                        .HasForeignKey("InventoryTypeId");

                    b.Navigation("InventorySubType");
                });

            modelBuilder.Entity("server.Models.Inventory.InventoryItem", b =>
                {
                    b.HasOne("server.Models.Inventory.BounceHouseType", "BounceHouseType")
                        .WithMany()
                        .HasForeignKey("BounceHouseTypeId");

                    b.HasOne("server.Models.Inventory.InventoryColor", "Color")
                        .WithMany()
                        .HasForeignKey("InventoryColorId");

                    b.HasOne("server.Models.Inventory.InventoryMaterial", "Material")
                        .WithMany()
                        .HasForeignKey("InventoryMaterialId");

                    b.HasOne("server.Models.Inventory.InventorySubType", "SubType")
                        .WithMany()
                        .HasForeignKey("InventorySubTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Models.Inventory.InventoryType", "Type")
                        .WithMany()
                        .HasForeignKey("InventoryTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BounceHouseType");

                    b.Navigation("Color");

                    b.Navigation("Material");

                    b.Navigation("SubType");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("server.Models.Inventory.InventoryMaterial", b =>
                {
                    b.HasOne("server.Models.Inventory.InventorySubType", "InventorySubType")
                        .WithMany("Materials")
                        .HasForeignKey("InventorySubTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Models.Inventory.InventoryType", null)
                        .WithMany("Materials")
                        .HasForeignKey("InventoryTypeId");

                    b.Navigation("InventorySubType");
                });

            modelBuilder.Entity("server.Models.Inventory.InventoryPurchase", b =>
                {
                    b.HasOne("server.Models.Inventory.InventoryItem", "InventoryItem")
                        .WithMany("Purchases")
                        .HasForeignKey("InventoryItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InventoryItem");
                });

            modelBuilder.Entity("server.Models.Inventory.InventoryRetirement", b =>
                {
                    b.HasOne("server.Models.Inventory.InventoryItem", "InventoryItem")
                        .WithMany("Retirements")
                        .HasForeignKey("InventoryItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InventoryItem");
                });

            modelBuilder.Entity("server.Models.Inventory.InventorySubType", b =>
                {
                    b.HasOne("server.Models.Inventory.InventoryType", "InventoryType")
                        .WithMany("SubTypes")
                        .HasForeignKey("InventoryTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InventoryType");
                });

            modelBuilder.Entity("server.Models.User.User", b =>
                {
                    b.HasOne("server.Models.User.JobTitle", "JobTitle")
                        .WithMany("Users")
                        .HasForeignKey("JobTitleId");

                    b.HasOne("server.Models.User.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobTitle");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("server.Models.Client.BusinessClient", b =>
                {
                    b.Navigation("Contacts");
                });

            modelBuilder.Entity("server.Models.Client.Client", b =>
                {
                    b.Navigation("BusinessClient");

                    b.Navigation("ResidentialClient");
                });

            modelBuilder.Entity("server.Models.Inventory.InventoryItem", b =>
                {
                    b.Navigation("Purchases");

                    b.Navigation("Retirements");
                });

            modelBuilder.Entity("server.Models.Inventory.InventorySubType", b =>
                {
                    b.Navigation("BounceHouseTypes");

                    b.Navigation("Colors");

                    b.Navigation("Materials");
                });

            modelBuilder.Entity("server.Models.Inventory.InventoryType", b =>
                {
                    b.Navigation("Colors");

                    b.Navigation("Materials");

                    b.Navigation("SubTypes");
                });

            modelBuilder.Entity("server.Models.User.JobTitle", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("server.Models.User.Role", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
